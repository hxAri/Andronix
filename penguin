#!/usr/bin/env bash

#
# Penguin
#
# Shell utility to install Linux on Termux.
# Please report any issues or bugs you find while using this tool.
# If there is an outdated distro installation, or an outdated gpg key
# it is purely not this script's fault because, this tool is not completely
# self-contained, it fetches various Linux Root File System (rootfs) resources
# from various sources, and be thankful they ever existed.
#
# @author Ari Setiawan
# @create 11.07-2023 18:21
# @github https://github.com/hxAri/Penguin
#
# Penguin Copyright (c) 2023 - Ari Setiawan <hxari@proton.me>
# Penguin Licence under GNU General Public Licence v3
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#


# Application name.
appname=Penguin

# Application author.
author="Ari Setiawan (hxAri)"
author_email="hxari@proton.me"

# Application version.
pversion=1.0.0

# Application repository.
github=https://github.com/hxAri/$appname
issues=https://github.com/hxAri/$appname/issues

# Termux directory.
termux=/data/data/com.termux

# Installation directory.
install=/data/data/com.termux/linux

# Rootfs Images stored.
images=$install/.rootfs

# Termux architecture.
architect=$(dpkg --print-architecture)

declare -A architects=(
	[alpine-3.10]=
	[arch-2021.07.01]=
	[debian-10.00]=
	[fedora-33]=
	[kali-21.2]="aarch64;arm64;arm;amd64;x86_64;amd64;i*86;i386;x86"
	[manjaro-21]=
	[nethunter-]="arm64-v8a;arm64;armeabi;armeabi-v7a;armhf"
	[parrot]="amd64;arm64;armhf;i386"
	[ubuntu]=
	[void]=
)
# declare -A desktops=(
# 	[alpine-3.10]="xfce"
# 	[arch-2021.07.01]="xfce;lxde"
# 	[debian-10.00]="xfce;lxqt;lxde"
# 	[fedora-33]="xfce;lxqt;lxde"
# 	[kali-21.2]="xfce;lxqt;lxde"
# 	[manjaro-21]="xfce;lxqt;lxde;mate"
# 	[nethunter]=
# 	[parrot]=
# 	[ubuntu]="xfce;lxqt;lxde"
# 	[void]="xfce;lxqt;lxde"
# )
declare -A desktops=(
	[alpine]="xfce"
	[arch]="xfce;lxde"
	[debian]="xfce;lxqt;lxde"
	[fedora]="xfce;lxqt;lxde"
	[kali]="xfce;lxqt;lxde"
	[manjaro]="xfce;lxqt;lxde;mate"
	[nethunter]=
	[parrot]=
	[ubuntu]="xfce;lxqt;lxde"
	[void]="xfce;lxqt;lxde"
)
# declare -A windows=(
# 	[alpine-3.10]=
# 	[arch-2021.07.01]="awesome;openbox;i3"
# 	[debian-10.00]="awesome;openbox;i3"
# 	[fedora-33]="awesome;openbox;i3"
# 	[kali-21.2]="awesome;openbox;i3"
# 	[manjaro-21]="awesome;openbox;i3"
# 	[nethunter]=
# 	[parrot]=
# 	[ubuntu-22.04]="awesome;openbox;i3"
# 	[void]="awesome;openbox;i3"
# )
declare -A windows=(
	[alpine]=
	[arch]="awesome;openbox;i3"
	[debian]="awesome;openbox;i3"
	[fedora]="awesome;openbox;i3"
	[kali]="awesome;openbox;i3"
	[manjaro]="awesome;openbox;i3"
	[nethunter]=
	[parrot]=
	[ubuntu]="awesome;openbox;i3"
	[void]="awesome;openbox;i3"
)

# Square bracket with interpunch.
sint="[Â·]"

# Dependency requirements.
dependencies=(
	cat
	curl
	cut
	proot
	tar
	wget
)

# Current user previlleges
whoami=$(whoami)


# For compatibility system.
if ! which puts >/dev/null; then
	function puts() {
		echo -e "\xb[0m$@"
	}
fi


# Handle disto action.
# distro [distro-name]
function distro() {

	# Set distro by parameter.
	local distro=${1,,}

	# Handle Alpine Distro Actions.
	function alpineDistro() {
		
		# Default Alpine Mode for install.
		local select=cli
		
		# Default Import is always empty.
		# Because we don't know where source destination.
		local import=
		
		# Default Alpine Directory.
		local target=$install/alpine
		local folder=alpine-fs
		
		# Default Alpine Executable.
		local binary=alpine
		local launch=alpine-start
		
		# Default Alpine Environment for install.
		local desktop=XFCE

		# Default Alpine Window Manager.
		local window=Awesome

		# Default Alpine Version for install.
		# local version=3.10.3
		
		logo
		echo "$(stdio stdout distro alpine)"
		puts "  $sint Distro Alpine"
		puts "  $sint Developer Alpine Linux Development Team"
		puts "  $sint Available Versions"
		puts "      [+] Alpine v3.10.3"
		puts "  $sint Available Install"
		puts "      [+] CLI Only"
		puts "      [+] Desktop Environment"
		puts "          [+] XFCE"
		puts "  $sint Actions"
		puts "      [1] Install"
		puts "      [2] Import"
		puts "      [3] Remove"
		puts "      [4] Cancel"
		distroInputAction "alpine" "install"
		case $action in
			cancel) penguin ;;
			remove)
				case ${select,,} in
					cli) distroRemove "alpine" $binary "cli" ;;
					desktop) distroRemove "alpine" $binary "desktop" $desktop ;;
					window) distroRemove "alpine" $binary "window" $window ;;
				esac
			;;
			import|install) distroInstall ;;
		esac
	}

	# Handle Arch Distro Actions.
	function archDistro() {
		
		# Default Arch Mode for install.
		local select=cli
		
		# Default Import is always empty.
		# Because we don't know where source destination.
		local import=
		
		# Default Arch Directory.
		local target=$install/arch
		local folder=arch-fs
		
		# Default Arch Executable.
		local binary=arch
		local launch=arch-start

		# Default Arch Environment for install.
		local desktop=XFCE
		
		# Default Arch Window Manager.
		local window=Awesome
		
		# Default Ubuntu Version for install.
		# local version=2021.07.01

		logo
		echo -e "$(stdio stdout distro arch)"
		puts "  $sint Distro Arch Linux"
		puts "  $sint Developer Lavente Polyak and others"
		puts "  $sint Available Versions"
		puts "      [+] Arch Linux v2021.07.01"
		puts "  $sint Available Install"
		puts "      [+] CLI Only"
		puts "      [+] Window Manager"
		puts "          [+] Awesome"
		puts "          [+] Openbox"
		puts "          [+] i3"
		puts "      [+] Desktop Environment"
		puts "          [+] XFCE"
		puts "          [+] LXDE"
		puts "  $sint Actions"
		puts "      [1] Install"
		puts "      [2] Import"
		puts "      [3] Remove"
		puts "      [4] Cancel"
		distroInputAction "arch" "install" $version
		case $action in
			cancel) penguin ;;
			remove)
				case ${select,,} in
					cli) distroRemove "arch" $binary "cli" ;;
					desktop) distroRemove "arch" $binary "desktop" $desktop ;;
					window) distroRemove "arch" $binary "window" $window ;;
				esac
			;;
			import|install) distroInstall ;;
		esac
	}

	# Handle Debian Distro Actions.
	function debianDistro() {
		
		# Default Debian Mode for install.
		local select=cli
		
		# Default Import is always empty.
		# Because we don't know where source destination.
		local import=
		
		# Default Debian Directory.
		local target=$install/debian
		local folder=debian-fs
		
		# Default Debian Executable.
		local binary=debian
		local launch=debian-start
		
		# Default Debian Environment for install.
		local desktop=XFCE

		# Default Debian Window Manager.
		local window=Awesome

		# Default Debian Version for install.
		# local version=10.00

		logo
		echo -e "$(stdio stdout distro debian)"
		puts "  $sint Distro Debian"
		puts "  $sint Developer The Debian"
		puts "  $sint Available Versions"
		puts "      [+] Debian v10.00"
		puts "  $sint Available Install"
		puts "      [+] CLI Only"
		puts "      [+] Window Manager"
		puts "          [+] Awesome"
		puts "          [+] Openbox"
		puts "          [+] i3"
		puts "      [+] Desktop Environment"
		puts "          [+] XFCE"
		puts "          [+] LXQT"
		puts "          [+] LXDE"
		puts "  $sint Actions"
		puts "      [1] Install"
		puts "      [2] Import"
		puts "      [3] Remove"
		puts "      [4] Cancel"
		distroInputAction "debian" "install" $version
		case $action in
			cancel) penguin ;;
			remove)
				case ${select,,} in
					cli) distroRemove "debian" $binary "cli" ;;
					desktop) distroRemove "debian" $binary "desktop" $desktop ;;
					window) distroRemove "debian" $binary "window" $window ;;
				esac
			;;
			import|install) distroInstall ;;
		esac
	}

	# Handle Fedora Distro Actions.
	function fedoraDistro() {
		
		# Default Fedora Mode for install.
		local select=cli
		
		# Default Import is always empty.
		# Because we don't know where source destination.
		local import=

		# Identify if distro is parta.
		local onpart=true
		
		# Default Fedora Directory.
		local target=$install/fedora
		local folder=fedora-fs
		
		# Default Fedora Executable.
		local binary=fedora
		local launch=fedora-start
		
		# Default Fedora Environment for install.
		local desktop=XFCE
		
		# Default Fedora Window Manager.
		local window=Awesome

		# Default Fedora Version for install.
		# local version=33

		logo
		echo -e "$(stdio stdout distro fedora)"
		puts "  $sint Distro Fedora"
		puts "  $sint Developer Fedora Project"
		puts "  $sint Available Versions"
		puts "      [+] Fedora v33"
		puts "  $sint Available Install"
		puts "      [+] CLI Only"
		puts "      [+] Window Manager"
		puts "          [+] Awesome"
		puts "          [+] Openbox"
		puts "          [+] i3"
		puts "      [+] Desktop Environment"
		puts "          [+] XFCE"
		puts "          [+] LXQT"
		puts "          [+] LXDE"
		puts "  $sint Actions"
		puts "      [1] Install"
		puts "      [2] Import"
		puts "      [3] Remove"
		puts "      [4] Cancel"
		distroInputAction "fedora" "install" $version
		case $action in
			cancel) penguin ;;
			remove)
				case ${select,,} in
					cli) distroRemove "fedora" $binary "cli" ;;
					desktop) distroRemove "fedora" $binary "desktop" $desktop ;;
					window) distroRemove "fedora" $binary "window" $window ;;
				esac
			;;
			import|install) distroInstall ;;
		esac
	}

	# Handle Kali Distro Actions.
	function kaliDistro() {
		
		# Default Kali Mode for install.
		local select=cli
		
		# Default Import is always empty.
		# Because we don't know where source destination.
		local import=
		
		# Default Kali Directory.
		local target=$install/kali
		local folder=kali-fs
		
		# Default Kali Executable.
		local binary=kali
		local launch=kali-start

		# Default Kali Environment for install.
		local desktop=XFCE
		
		# Default Kali Window Manager.
		local window=Awesome

		# Default Kali Version for install.
		# local version=21.2
		
		logo
		echo -e "$(stdio stdout distro kali)"
		puts "  $sint Distro Kali Linux"
		puts "  $sint Developer Offensive Security"
		puts "  $sint Available Versions"
		puts "      [+] Kali Linux v21.2"
		puts "  $sint Available Install"
		puts "      [+] CLI Only"
		puts "      [+] Window Manager"
		puts "          [+] Awesome"
		puts "          [+] Openbox"
		puts "          [+] i3"
		puts "      [+] Desktop Environment"
		puts "          [+] XFCE"
		puts "          [+] LXQT"
		puts "          [+] LXDE"
		puts "  $sint Actions"
		puts "      [1] Install"
		puts "      [2] Import"
		puts "      [3] Remove"
		puts "      [4] Cancel"
		distroInputAction "kali" "install" $version
		case $action in
			cancel) penguin ;;
			remove)
				case ${select,,} in
					cli) distroRemove "kali" $binary "cli" ;;
					desktop) distroRemove "kali" $binary "desktop" $desktop ;;
					window) distroRemove "kali" $binary "window" $window ;;
				esac
			;;
			import|install) distroInstall ;;
		esac
	}

	# Handle Manjaro Distro Actions.
	function manjaroDistro() {
		
		# Default Manjaro Mode for install.
		local select=cli
		
		# Default Import is always empty.
		# Because we don't know where source destination.
		local import=

		# Identify if distro is parta.
		local onpart=true
		
		# Default Manjaro Directory.
		local target=$install/manjaro
		local folder=manjaro-fs
		
		# Default Manjaro Executable.
		local binary=manjaro
		local launch=manjaro-start
		
		# Default Manjaro Environment for install.
		local desktop=XFCE
		
		# Default Manjaro Window Manager.
		local window=Awesome

		# Default Manjaro Version for install.
		# local version=21

		logo
		echo "$(stdio stdout manjaro)"
		puts "  $sint Distro Manjaro"
		puts "  $sint Developer Manjaro GmbH & Co. KG"
		puts "  $sint Available Versions"
		puts "      [+] Manjaro v21"
		puts "  $sint Available Install"
		puts "      [+] CLI Only"
		puts "      [+] Window Manager"
		puts "          [+] Awesome"
		puts "          [+] Openbox"
		puts "          [+] i3"
		puts "      [+] Desktop Environment"
		puts "          [+] XFCE"
		puts "          [+] LXQT"
		puts "          [+] LXDE"
		puts "          [+] MATE"
		puts "  $sint Actions"
		puts "      [1] Install"
		puts "      [2] Import"
		puts "      [3] Remove"
		puts "      [4] Cancel"
		distroInputAction "manjaro" "install" $version
		case $action in
			cancel) penguin ;;
			remove)
				case ${select,,} in
					cli) distroRemove "manjaro" $binary "cli" ;;
					desktop) distroRemove "manjaro" $binary "desktop" $desktop ;;
					window) distroRemove "manjaro" $binary "window" $window ;;
				esac
			;;
			import|install) distroInstall ;;
		esac
	}

	# Handle Nethunter Distro Actions.
	function nethunterDistro() {
		penguin
	}

	# Handle Parrot Distro Actions.
	function parrotDistro() {
		penguin
	}

	# Handle Ubuntu Distro Actions.
	function ubuntuDistro() {

		# Default Ubuntu Mode for install.
		local select=cli
		
		# Default Import is always empty.
		# Because we don't know where source destination.
		local import=
		
		# Default Ubuntu Directory.
		local target=$install/ubuntu
		local folder=ubuntu-fs
		
		# Default Ubuntu Executable.
		local binary=ubuntu
		local launch=ubuntu-start
		
		# Default Ubuntu Environment for install.
		local desktop=XFCE
		
		# Default Ubuntu Window Manager for install.
		local window=Awesome
		
		# Default Ubuntu Version for install.
		local version=22.04
		
		logo
		echo -e "$(stdio stdout distro ubuntu)"
		puts "  $sint Distro Ubuntu"
		puts "  $sint Developer Canonical"
		puts "  $sint Available Versions"
		puts "      [+] Ubuntu v22.04"
		puts "      [+] Ubuntu v20.04"
		puts "      [+] Ubuntu v18.04"
		puts "  $sint Available Install"
		puts "      [+] CLI Only"
		puts "      [+] Window Manager"
		puts "          [+] Awesome"
		puts "          [+] Openbox"
		puts "          [+] i3"
		puts "      [+] Desktop Environment"
		puts "          [+] XFCE"
		puts "          [+] LXQT"
		puts "          [+] LXDE"
		puts "  $sint Actions"
		puts "      [1] Install"
		puts "      [2] Import"
		puts "      [3] Remove"
		puts "      [4] Cancel"
		distroInputAction "ubuntu" "install" $version
		case $action in
			cancel) penguin ;;
			remove)
				case ${select,,} in
					cli) distroRemove "ubuntu" $binary "cli" $version;;
					desktop) distroRemove "ubuntu" $binary "desktop" $desktop $version ;;
					window) distroRemove "ubuntu" $binary "window" $window $version ;;
				esac
			;;
			import|install) distroInstall ;;
		esac
	}
	
	# Handle Void Distro Actions.
	function voidDistro() {
		
		logo
		echo "$(stdio stdout void)"
		puts "  $sint Distro Void"
		puts "  $sint Developer Void Linux Team"
		puts "  $sint Available Versions"
		puts "      [+] Void Rolling Release"
		puts "  $sint Available Install"
		puts "      [+] CLI Only"
		puts "      [+] Window Manager"
		puts "          [+] Awesome"
		puts "          [+] Openbox"
		puts "          [+] i3"
		puts "      [+] Desktop Environment"
		puts "          [+] XFCE"
		puts "          [+] LXQT"
		puts "          [+] LXDE"
		puts "  $sint Actions"
		puts "      [1] Install"
		puts "      [2] Import"
		puts "      [3] Remove"
		puts "      [4] Cancel"
	}

	if [[ $1 != "" ]]; then
		case ${1,,} in
			alpine) alpineDistro ;;
			arch) archDistro ;;
			debian) debianDistro ;;
			fedora) fedoraDistro ;;
			kali) kaliDistro ;;
			manjaro) manjaroDistro ;;
			nethunter) nethunterDistro ;;
			parrot) parrotDistro ;;
			ubuntu) ubuntuDistro ;;
			void) voidDistro ;;
			*)
				echo -e "$(stdio stderr distro unknown $1)\n"
				exit 1
			;;
		esac
	else
		echo -e "$(stdio stderr distro required)\n"
		exit 1
	fi
}

# Handle fix distro acrhive url.
# distroArchive [distro-name]
function distroArchive() {
	local distro=$1
	if [[ ! -f $import ]]; then
		case ${distro,,} in
			alpine)
				if [[ $version != "" && $version != "3.10.3" ]]; then
					echo -e "$(stdio stderr distro $distro $version)\n"
					exit 1
				fi
				case ${architect,,} in
					aarch64) archname="aarch64" ;;
					arm) archname="armhf" ;;
					amd64) archname="x86_64" ;;
					x86_64) archname="x86_64" ;;	
					i*86) archname="x86" ;;
					x86) archname="x86" ;;
					*)
						echo -e "$(stdio stderr $distro $version $architect)\n"
						exit 1
					;;
				esac
				rootfs="alpine-rootfs-${archname}.tar.gz"
				archurl="https://github.com/AndronixApp/AndronixOrigin/raw/master/Rootfs/Alpine/${archname}/alpine-minirootfs-${version}-${archname}.tar.gz?raw=true"
			;;
			arch)
				if [[ $version != "" && $version != "2021.07.01" ]]; then
					echo -e "$(stdio stderr distro $distro $version)\n"
					exit 1
				fi
				case ${architect,,} in
					aarch64) archname="aarch64" ;;
					arm) archname="armv7" ;;
					*)
						echo -e "$(stdio stderr $distro $version $architect)\n"
						exit 1
					;;
				esac
				rootfs="arch-rootfs-${archname}.tar.gz"
				archurl="http://os.archlinuxarm.org/os/ArchLinuxARM-${archname}-latest.tar.gz"
			;;
			debian)
				if [[ $version != "" && $version != "10.00" ]]; then
					echo -e "$(stdio stderr distro $distro $version)\n"
					exit 1
				fi
				case ${architect,,} in
					aarch64) archname="arm64" ;;
					arm) archname="armhf" ;;
					amd64) archname="amd64" ;;
					x86_64) archname="amd64" ;;	
					i*86) archname="i386" ;;
					x86) archname="i386" ;;
					*)
						echo -e "$(stdio stderr $distro $version $architect)\n"
						exit 1
					;;
				esac
					rootfs="debian-rootfs-${archname}.tar.gz"
					archurl="https://github.com/Techriz/AndronixOrigin/blob/master/Rootfs/Debian/${archname}/debian-rootfs-${archname}.tar.xz?raw=true"
			;;
			fedora)
				if [[ $version != "" && $version != "33" ]]; then
					echo -e "$(stdio stderr distro $distro $version)\n"
					exit 1
				fi
				if [[ ${architect,,} == "aarch64" ]]; then
					declare -A archurl=(
						[partaa]="https://github.com/AndronixApp/AndronixOrigin/raw/master/Rootfs/Fedora/arm64/fedora.partaa"
						[partab]="https://github.com/AndronixApp/AndronixOrigin/raw/master/Rootfs/Fedora/arm64/fedora.partab"
					)
				else
					case ${architect,,} in
						arm) archname="armhf" ;;
						amd64) archname="amd64" ;;
						x86_64) archname="amd64" ;;
						*)
							echo -e "$(stdio stderr $distro $version $architect)\n"
						exit 1
						;;
					esac
					rootfs=rootfs="fedora-rootfs-${archname}.tar.gz"
					archurl="https://github.com/Techriz/AndronixOrigin/blob/master/Rootfs/Fedora/${archname}/fedora-rootfs-${archname}.tar.xz?raw=true"
				fi
			;;
			kali)
				if [[ $version != "" && $version != "21.2" ]]; then
					echo -e "$(stdio stderr distro $distro $version)\n"
					exit 1
				fi
				case ${architect,,} in
					aarch64) archname="arm64" ;;
					arm) archname="armhf" ;;
					amd64) archname="amd64" ;;
					x86_64) archname="amd64" ;;	
					i*86) archname="i386" ;;
					x86) archname="i386" ;;
					*)
						echo -e "$(stdio stderr $distro $version $architect)\n"
						exit 1
					;;
				esac
				rootfs="kali-rootfs-${archname}.tar.xz"
				if [[ $archname == "arm64" ]]; then
					archurl="https://github.com/AndronixApp/AndronixOrigin/releases/download/kali-arm64-tarball/kali-rootfs-arm64.tar.xz"
				else
					archurl="https://github.com/Techriz/AndronixOrigin/blob/master/Rootfs/Kali/${archname}/kali-rootfs-${archname}.tar.xz?raw=true"
				fi
			;;
			manjaro)
				if [[ $version != "" && $version != "21" ]]; then
					echo -e "$(stdio stderr distro $distro $version)\n"
					exit 1
				fi
				declare -A archurl=(
					[partaa]="https://github.com/AndronixApp/AndronixOrigin/raw/master/Rootfs/Manjaro/manjaro.partaa"
					[partab]="https://github.com/AndronixApp/AndronixOrigin/raw/master/Rootfs/Manjaro/manjaro.partab"
					[partac]="https://github.com/AndronixApp/AndronixOrigin/raw/master/Rootfs/Manjaro/manjaro.partac"
				)
			;;
			nethunter) ;;
			parrot) ;;
			ubuntu)
				archname="arm64"
				if [[ $version == 22.04 ]]; then
					if [[ ${architect,,} != aarch64 ]]; then
						echo -e "$(stdio stderr $distro $version $architect)\n"
						exit 1
					fi
					rootfs="ubuntu-rootfs-${archname}.${version}.tar.gz"
					archurl="https://github.com/AndronixApp/AndronixOrigin/raw/master/Rootfs/Ubuntu22/jammy-${archname}.tar.gz"
				elif [[ $version == 20.03 ]]; then
					case ${architect,,} in
						aarch64) archname="arm64" ;;
						arm) archname="armhf" ;;
						amd64) archname="amd64" ;;
						x86_64) archname="amd64" ;;
						*)
							echo -e "$(stdio stderr $distro $version $architect)\n"
							exit 1
						;;
					esac
					rootfs="ubuntu-rootfs-${archname}.${version}.tar.gz"
					archurl="https://github.com/AndronixApp/AndronixOrigin/raw/master/Rootfs/Ubuntu20/focal-${archname}.tar.gz"
				elif [[ $version == 18.04 ]]; then
					case ${architect,,} in
						aarch64) archname="arm64" ;;
						arm) archname="armhf" ;;
						amd64) archname="amd64" ;;
						x86_64) archname="amd64" ;;
						i*86) archname="i386" ;;
						x86) archname="i386" ;;
						*)
							echo -e "$(stdio stderr $distro $version $architect)\n"
							exit 1
						;;
					esac
					rootfs="ubuntu-rootfs-${archname}.${version}.tar.xz"
					archurl="https://github.com/Techriz/AndronixOrigin/blob/master/Rootfs/Ubuntu/${archname}/ubuntu-rootfs-${archname}.tar.xz?raw=true"
				else
					echo -e "$(stdio stderr distro $distro $version)\n"
					exit 1
				fi
			;;
			void) ;;
			*)
				echo -e "$(stdio stderr unknown distro $distro)\n"
				exit 1
			;;
		esac
		if [[ ! -f ${images}/${distro}/${rootfs} ]]; then
			if [[ $onpart ]]; then
				for part in ${!archurl[@]}; do
					if [[ ! -f ${images}/${distro}/${distro}.${part} ]]; then
						echo -e "$(stdio stdout downloading ${distro}.${part})"
						wget -qO- --tries=20 "${archurl[$part]}" --show-progress --progress=bar:force:noscroll -O "${images}/${distro}/${distro}.${part}"
						if [[ $? -ne 0 ]]; then
							echo -e "$(stdio stderr download distro ${images}/${distro}/${distro}.${part})\n"
							exit 1
						fi
					fi
				done
				echo "$(stdio stdout building $distro $rootfs)"
				cat ${images}/${distro}/${distro}.parta* > $images/$rootfs
				if [[ $? -ne 0 ]]; then
					echo -e "$(stdio stderr building $distro $rootfs)\n"
					exit 1
				fi
				for part in ${!archurl[@]}; do
					inputRemove=
					readline "remove" ${distro}/${distro}.${part} "Y"
					if [[ ${inputRemove,,} == "y" ]]; then
						rm ${images}/${distro}/${distro}.${part}
						if [[ $? -ne 0 ]]; then
							echo -e "$(stdio stderr remove ${distro}/${distro}.${part})\n"
							readline "remove" "skip" "Y"
							if [[ ${inputSkip,,} == "n" ]]; then
								echo -e "$(stdio stderr remove aborted)\n"
								exit 1
							fi
						fi
					fi
				done
			else
				echo -e "$(stdio stdout downloading $rootfs)"
				wget -qO- --tries=20 "$archurl" --show-progress --progress=bar:force:noscroll -O "${images}/${distro}/${rootfs}"
				if [[ $? -ne 0 ]]; then
					echo -e "$(stdio stderr download distro ${images}/${distro}/${rootfs})\n"
					exit 1
				fi
			fi
		fi
	else
		rootfs=$import
	fi
}

# Handle building distro binary executable.
# distroBinary [distro-name] [binary] [launch] [folder] [source]
function distroBinary() {
	pass
}

# Handle fix distro configuration.
# distroConfig [distro-name]
function distroConfig() {
	local distro=$1
	local params=
	local inputSkip=
	case ${distro,,} in
		alpine)
			
			echo "$(stdio stdout $distro creating /:etc/fstab)"
			echo "" > $source/$folder/etc/fstab
			
			echo "$(stdio stdout $distro removing /:etc/resolv.conf)"
			rm -rf $source/$folder/etc/resolv.conf
			if [[ $? -ne 0 ]]; then
				echo "$(stdio stderr remove $folder/etc/resolv.conf)"
				inputRemove=
				readline "remove" "skip" "Y"
				if [[ ${inputSkip,,} == "n" ]]; then
					echo -e "$(stdio stderr remove aborted)\n"
					exit 1
				fi
			fi
			
			echo "$(stdio stdout $distro creating /:etc/resolf.conf)"
			echo "nameserver 8.8.8.8" > $source/$folder/etc/resolv.conf
			
			echo "$(stdio stdout $distro updating)"
			bash $source/$launch apk update

			echo "$(stdio stdout $distro installing bash)"
			bash $source/$launch apk add --no-cache bash
			
			echo "$(stdio stdout $distro seding /:etc/passwd)"
			sed -i "s/ash/bash/g" $source/$folder/etc/passwd
			
			echo "$(stdio stdout $distro seding $launch)"
			sed -i "s/bin\/sh/bin\/bash/g" $source/$launch
			
			if [[ ${select,,} == "desktop" ]]; then
				params=$desktop
				echo "$(stdio stdout $distro removing /:root/.bash_profile)"
				rm -rf $source/$folder/root/.bash_profile
				if [[ $? -ne 0 ]]; then
					echo "$(stdio stderr remove $folder/:root/.bash_profile)"
					inputRemove=
					readline "remove" "skip" "Y"
					if [[ ${inputSkip,,} == "n" ]]; then
						echo -e "$(stdio stderr remove aborted)\n"
						exit 1
					fi
				fi
				echo "$(stdio stdout $distro creating /:root/.bash_profile)"
				cat <<- EOF > $target/$folder/root/.bash_profile
					#!/usr/bin/env bash
					
					# Downloading Desktop Environment Setup file.
					wget https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Installer/Alpine/alpine-${desktop,,}.sh -O /root/${desktop,,}.sh
					
					# Executing Desktop Environment Setup file..
					bash /root/${desktop,,}.sh
					
					# Removing Desktop Environment Setup file.
					echo -e "$(stdio stdout $distro removing ${desktop}.sh)"
					rm -rf /root/${desktop,,}.sh
					
					clear
				EOF
				echo "$(stdio stdout $distro chmod+x /:root/.bash_profile)"
				chmod +x $target/$folder/root/.bash_profile
			fi
			sleep 2.4
		;;
		arch)
			echo "$(stdio stdout $distro downloading resolv.conf)"
			wget "https://raw.githubusercontent.com/Techriz/AndronixOrigin/master/Installer/Arch/armhf/resolv.conf" -P $target/$folder/root
			if [[ $? -ne 0 ]]; then
				echo "$(stdio stderr download resolv.conf)"
				inputRemove=
				readline "download" "skip" "Y"
				if [[ ${inputSkip,,} == "n" ]]; then
					echo -e "$(stdio stderr download aborted)\n"
					exit 1
				fi
			fi
			
			echo "$(stdio stdout $distro downloading additional.sh)"
			wget "https://raw.githubusercontent.com/Techriz/AndronixOrigin/master/Installer/Arch/armhf/additional.sh" -P $target/$folder/root
			if [[ $? -ne 0 ]]; then
				echo "$(stdio stderr download additional.sh)"
				inputRemove=
				readline "download" "skip" "Y"
				if [[ ${inputSkip,,} == "n" ]]; then
					echo -e "$(stdio stderr download aborted)\n"
					exit 1
				fi
			fi
			
			if [[ -d $source/$folder/proc ]]; then
				chmod 755 $source/$folder/proc
				mkdir -p $source/$folder/proc/fakethings
				if [[ $? -ne 0 ]]; then
					echo "$(stdio stderr makedir $folder/proc/fakethings)"
					inputRemove=
					readline "makedir" "skip" "Y"
					if [[ ${inputSkip,,} == "n" ]]; then
						echo -e "$(stdio stderr makedir aborted)\n"
						exit 1
					fi
				fi
				if [[ ! -f $source/$folder/proc/fakethings/version ]]; then
					distroProcVersion $source/$folder
				fi
				if [[ ! -f $source/$folder/proc/fakethings/vmstat ]]; then
					distroProcVmstat $source/$folder
				fi
				if [[ ! -f $source/$folder/proc/fakethings/stat ]]; then
					distroProcStat $source/$folder
				fi
			fi

			echo "$(stdio stdout $distro removing /:root/.bash_profile)"
			rm -rf $source/$folder/root/.bash_profile
			if [[ $? -ne 0 ]]; then
				echo "$(stdio stderr remove $folder/:root/.bash_profile)"
				inputRemove=
				readline "remove" "skip" "Y"
				if [[ ${inputSkip,,} == "n" ]]; then
					echo -e "$(stdio stderr remove aborted)\n"
					exit 1
				fi
			fi

			case ${select,,} in
				cli)
					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Executing additional script.
						bash /root/additional.sh
						clear
						
						echo -e "$(stdio stdout $distro removing additional.sh)"
						rm -rf /root/additional.sh
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
					EOF
				;;
				desktop)
					params=$desktop
					case ${desktop,,} in
						xfce)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro/XFCE4"
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro"
								"xfce4_de.sh"
							)
						;;
						lxqt)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro/LXQT"
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro"
								"lxqt_de.sh"
							)
						;;
						lxde)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro/LXDE"
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro"
								"lxde_de.sh"
							)
						;;
					esac
					
					echo "$(stdio stdout $distro desktop setup)"
					echo "$(stdio stdout $distro downloading /:root/${desktop}.sh)"
					wget --tries=20 ${rinku[1]}/${rinku[2]} -O $source/$folder/root/${desktop}.sh
					
					echo "$(stdio stdout $distro chmod+x /:root/${desktop}.sh)"
					chmod +x $source/$folder/root/${desktop}.sh

					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Executing additional script.
						bash /root/additional.sh
						clear
						
						echo -e "..arch: additional.sh: removing"
						rm -rf /root/additional.sh
						
						# Installing required packages.
						pacman -Syyuu --noconfirm && pacman -S wget sudo screenfetch --noconfirm 
						clear
						
						if [[ ! -f /root/${desktop}.sh ]]; then
							echo -e "$(stdio stdout $distro downlaoding ${desktop}.sh)"
							wget --tries=20 ${rinku[1]}/${rinku[2]} -O /root/${desktop}.sh
						fi
						
						# Executing Desktop Environment Setup file..
						bash /root/${rinku[1]}.sh
						clear
						
						if [[ ! -f /usr/local/bin/vncserver-start ]]; then
							echo -e "$(stdio stdout $distro downloading vncserver-start)"
							wget --tries=20 ${rinku[0]}/vncserver-start -O /usr/local/bin/vncserver-start
							
							echo -e "$(stdio stdout $distro chmod+x vncserver-start)"
							chmod +x /usr/local/bin/vncserver-start
							
							echo -e "$(stdio stdout $distro downloading vncserver-stop)"
							wget --tries=20 ${rinku[0]}/vncserver-stop -O /usr/local/bin/vncserver-stop
							
							echo -e "$(stdio stdout $distro chmod+x vncserver-stop)"
							chmod +x /usr/local/bin/vncserver-stop
						fi
						if [[ ! -f /usr/bin/vncserver ]]; then
							pacman -S tigervnc --noconfirm > /dev/null
						fi
						clear
						
						echo -e "$(stdio stdout $distro installing firefox)"
						pacman -S firefox --noconfirm
						
						echo -e "$(stdio stdout $distro removing ${desktop}.sh)"
						rm -rf /root/${desktop}.sh
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Displaying screenfetch.
						clear && screenfetch -A "Arch Linux" && echo
						sleep 2.4
					EOF
				;;
				window)
					params=$window
					declare -A rinku=(
						[1]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman"
						[2]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/WM/Pacman"
					)
					
					echo "$(stdio stdout $distro window setup)"
					echo "$(stdio stdout $distro downloading /:root/${window}.sh)"
					wget --tries=20 ${rinku[2]}/${window}.sh -O $source/$folder/root/${window}.sh
					
					echo "$(stdio stdout $distro chmod+x /:root/${window}.sh)"
					chmod +x $source/$folder/root/${window}.sh
					
					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Executing additional script.
						bash /root/additional.sh
						clear
						
						echo -e "$(stdio stdout $distro removing additional.sh)"
						rm -rf /root/additional.sh
						
						# Installing required packages.
						pacman -Syyuu --noconfirm && pacman -S wget sudo screenfetch --noconfirm
						clear
						
						if [[ ! -f /root/${window}.sh ]]; then
							echo -e "$(stdio stdout $distro downloading ${window}.sh)"
							wget --tries=20 ${rinku[2]}/${window}.sh -O /root/${window}.sh
						fi
						
						# Executing Window Manager Setup file..
						bash /root/${window}.sh
						clear
						
						if [[ ! -f /usr/bin/vncserver ]]; then
							pacman -S tigervnc --noconfirm > /dev/null
						fi
						clear
						
						echo -e "$(stdio stdout $distro removing ${window}.sh)"
						rm -rf /root/${window}.sh
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Displaying screenfetch.
						clear && screenfetch -A "Arch Linux" && echo
						sleep 2.4
					EOF
				;;
			esac
			echo "$(stdio stdout $distro chmod+x /:root/.bash_profile)"
			chmod +x $target/$folder/root/.bash_profile
			sleep 2.4
		;;
		debian)
			case ${select,,} in
				cli) ;;
				desktop)
					params=$desktop
					case ${desktop,,} in
						xfce)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/APT/XFCE4"
								"xfce4_de.sh"
							)
						;;
						lxqt)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/APT/LXQT"
								"lxqt_de.sh"
							)
						;;
						lxde)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/APT/LXDE"
								"lxde_de.sh"
							)
						;;
					esac
					
					echo "$(stdio stdout $distro desktop setup)"
					echo "APT::Acquire::Retries \"3\";" > $source/$folder/etc/apt/apt.conf.d/80-retries
					
					echo "$(stdio stdout $distro downloading /:root/${desktop}.sh)"
					wget -qO- --tries=20 ${rinku[0]}/${rinku[1]} --show-progress --progress=bar:force:noscroll -O $source/$folder/root/${desktop}.sh
					
					echo "$(stdio stdout $distro chmod+x /:root/${desktop}.sh)"
					chmod +x $source/$folder/root/${desktop}.sh
					
					echo "$(stdio stdout $distro removing /:root/.bash_profile)"
					rm -rf $source/$folder/root/.bash_profile
					if [[ $? -ne 0 ]]; then
						echo "$(stdio stderr remove $folder/:root/.bash_profile)"
						inputRemove=
						readline "remove" "skip" "Y"
						if [[ ${inputSkip,,} == "n" ]]; then
							echo -e "$(stdio stderr remove aborted)\n"
							exit 1
						fi
					fi
					
					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Updating packages.
						apt update -y
						
						# Installing required packages.
						apt install sudo nano wget bash screenfetch -y
						clear
						
						if [[ ! -f /root/${desktop}.sh ]]; then
							echo -e "$(stdio stdout $distro downloading ${desktop}.sh)"
							wget -qO- --tries=20 "${rinku[0]}/${rinku[1]}" --show-progress --progress=bar:force:noscroll -O /root/${desktop}.sh
						fi
						
						# Executing Desktop Environment Setup file..
						bash /root/${desktop}.sh
						clear
						
						if [[ ! -f /usr/local/bin/vncserver-start ]]; then
							echo -e "$(stdio stdout $distro downloading vncserver-start)"
							wget -qO- --tries=20 ${rinku[0]}/vncserver-start --show-progress --progress=bar:force:noscroll -O /usr/local/bin/vncserver-start
							echo -e "$(stdio stdout $distro chmod+x vncserver-start)"
							chmod +x /usr/local/bin/vncserver-start
						fi
						if [[ ! -f /usr/local/bin/vncserver-stop ]]; then
							echo -e "$(stdio stdout $distro downloading vncserver-stop)"
							wget -qO- --tries=20 ${rinku[0]}/vncserver-stop --show-progress --progress=bar:force:noscroll -O /usr/local/bin/vncserver-stop
							echo -e "$(stdio stdout $distro chmod+x vncserver-stop)"
							chmod +x /usr/local/bin/vncserver-stop
						fi
						if [[ ! -f /usr/bin/vncserver ]]; then
							apt install tigervnc-standalone-server -y
						fi
						clear
						
						echo -e "$(stdio stdout $distro installing firefox)"
						apt install firefox-esr -y
						
						echo -e "$(stdio stdout $distro removing ${desktop}.sh)"
						rm -rf /root/${desktop}.sh

						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Displaying screenfetch.
						clear && screenfetch -A "Debian" && echo
						sleep 2.4
					EOF
					
					echo "$(stdio stdout $distro chmod+x /:root/.bash_profile)"
					chmod +x $target/$folder/root/.bash_profile
				;;
				window)
					params=$window
					declare -A rinku=(
						[1]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/APT"
						[2]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/WM/APT"
					)
					
					echo "$(stdio stdout $distro window setup)"
					echo "APT::Acquire::Retries \"3\";" > $source/$folder/etc/apt/apt.conf.d/80-retries
					
					echo "$(stdio stdout $distro downloading /:root/${window}.sh)"
					wget -qO- --tries=20 ${rinku[2]}/${window}.sh --show-progress --progress=bar:force:noscroll -O $source/$folder/root/${window}.sh

					echo "$(stdio stdout $distro chmod+x /:root/${window}.sh)"
					chmod +x $source/$folder/root/${window}.sh
					
					echo "$(stdio stdout $distro removing /:root/.bash_profile)"
					rm -rf $source/$folder/root/.bash_profile
					if [[ $? -ne 0 ]]; then
						echo "$(stdio stderr remove $folder/:root/.bash_profile)"
						inputRemove=
						readline "remove" "skip" "Y"
						if [[ ${inputSkip,,} == "n" ]]; then
							echo -e "$(stdio stderr remove aborted)\n"
							exit 1
						fi
					fi

					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Updating packages.
						apt update -y
						
						# Installing required packages.
						apt install sudo nano bash wget screenfetch -y
						clear
						
						if [[ ! -f /root/${window}.sh ]]; then
							echo -e "$(stdio stdout $distro downloading ${window}.sh)"
							wget -qO- --tries=20 ${rinku[2]}/${window}.sh --show-progress --progress=bar:force:noscroll -O /root/${window}.sh
						fi
						
						# Executing Window Manager Setup file..
						bash /root/${window}.sh
						clear
						
						if [[ ! -f /usr/bin/vncserver ]]; then
							apt install tigervnc-standalone-server -y
						fi
						clear
						
						echo -e "$(stdio stdout $distro removing ${window.sh})"
						rm -rf /root/${window}.sh
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Displaying screenfetch.
						clear && screenfetch -A "Debian" && echo
						sleep 2.4
					EOF
					
					echo "$(stdio stdout $distro chmod+x /:root/.bash_profile)"
					chmod +x $target/$folder/root/.bash_profile
				;;
			esac
			sleep 2.4
		;;
		fedora)
			case ${archurl,,} in
				armhf|amd64|amd64)
					echo "$(stdio stdout $distro setting server)"
					echo "$(stdio stdout $distro creating /:etc/hosts)"
					echo "127.0.0.1 localhost" > $source/$folder/etc/hosts
					echo "$(stdio stdout $distro creating /:etc/resolv.conf)"
					echo "nameserver 8.8.8.8" > $source/$folder/etc/resolv.conf
					echo "nameserver 8.8.4.4" >> $target/$folder/etc/resolv.conf
				;;
			esac
			case ${select,,} in
				cli) ;;
				desktop)
					params=$desktop
					case ${desktop,,} in
						xfce)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Fedora/XFCE4"
								"xfce4_de.sh"
							)
						;;
						lxqt)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Fedora/LXQT"
								"lxqt_de.sh"
							)
						;;
						lxde)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Fedora/LXDE"
								"lxde_de.sh"
							)
						;;
					esac
					
					echo "$(stdio stdout $distro desktop setup)"
					echo "$(stdio stdout $distro downloading /:root/${desktop}.sh)"
					wget -qO- --tries=20 ${rinku[0]}/${rinku[1]} --show-progress --progress=bar:force:noscroll -O $source/$folder/root/${desktop}.sh

					echo "$(stdio stdout $distro chmod+x /:root/${desktop}.sh)"
					chmod +x $source/$folder/root/${desktop}.sh
					
					echo "$(stdio stdout $distro removing /:root/.bash_profile)"
					rm -rf $source/$folder/root/.bash_profile
					
					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Installing required packages.
						yum install wget screenfetch -y
						clear

						if [[ ! -f /root/${desktop}.sh ]]; then
							echo -e "$(stdio stdout $distro downloading ${desktop}.sh)"
							wget -qO- --tries=20 ${rinku[0]}/${rinku[1]} --show-progress --progress=bar:force:noscroll -O /root/${desktop}.sh
						fi
						
						# Executing Desktop Environment Setup file..
						bash /root/${desktop}.sh
						clear
						
						if [[ ! -f /usr/local/bin/vncserver-start ]]; then
							echo -e "$(stdio stdout $distro downloading vncviewer-start)"
							wget -qO- --tries=20 ${rinku[0]}/vncserver-start --show-progress --progress=bar:force:noscroll -O /usr/local/bin/vncserver-start
							
							echo -e "$(stdio stdout $distro chmod+x vncviewer-start)"
							chmod +x /usr/local/bin/vncserver-start
							
							echo -e "$(stdio stdout $distro downloading vncviewer-stop)"
							wget -qO- --tries=20 ${rinku[0]}/vncserver-stop --show-progress --progress=bar:force:noscroll -O /usr/local/bin/vncserver-stop
							
							echo -e "$(stdio stdout $distro chmod+x vncviewer-stop)"
							chmod +x /usr/local/bin/vncserver-stop
						fi
						if [[ ! -f /usr/bin/vncserver ]]; then
							yum install tigervnc-server -y
						fi
						clear
						
						echo -e "$(stdio stdout $distro installing firefox)"
						yum install firefox -y
						
						echo -e "$(stdio stdout $distro removing ${desktop}.sh)"
						rm -rf /root/${desktop}.sh
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Displaying screenfetch.
						clear && screenfetch -A "Fedora" && echo
						sleep 2.4
					EOF
					
					echo "$(stdio stdout $distro chmod+x /:root/.bash_profile)"
					chmod +x $source/$folder/root/.bash_profile
				;;
				window)
					params=$window
					declare -A rinku=(
						[1]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/DNF"
						[2]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/WM/DNF"
					)
					
					echo "$(stdio stdout $distro window setup)"
					echo "$(stdio stdout $distro downloading /:root/${window}.sh)"
					wget -qO- --tries=20 ${rinku[2]}/${window}.sh --show-progress --progress=bar:force:noscroll  -O $source/$folder/root/${window}.sh

					echo "$(stdio stdout $distro chmod+x /:root/${window}.sh)"
					chmod +x $source/$folder/root/${window}.sh
					
					echo "$(stdio stdout $distro creating /:root/.bahs_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Installing required packages.
						dnf install wget nano screenfetch -y
						clear
						
						if [[ ! -f /root/${window}.sh ]]; then
							echo "$(stdio stdout $distro downloading ${window}.sh)"
							wget -qO- --tries=20 ${rinku[2]}/${window}.sh --show-progress --progress=bar:force:noscroll -O /root/${window}.sh
						fi
						
						# Executing Window Manager Setup file..
						bash /root/${window}.sh
						clear
						
						if [[ ! -f /usr/bin/vncserver ]]; then
							dnf install tigervnc-server -y
						fi
						clear
						
						echo "$(stdio stdout $distro removing ${window}.sh)"
						rm -rf /root/${window}.sh
						
						echo "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Displaying screenfetch.
						clear && screenfetch -A "Fedora" && echo
						sleep 2.4
					EOF
					
					echo "$(stdio stdout $distro chmod+x /:root/.bash_profile)"
					chmod +x $target/$folder/root/.bash_profile
				;;
			esac
			sleep 2.4
		;;
		kali)

			echo "$(stdio stdout $distro patching mirrorlist)"
			echo "deb [trusted=yes] http://http.kali.org/kali kali-rolling penguin contrib non-free" > $source/$folder/etc/apt/sources.list
			
			echo "$(stdio stdout $distro downloading /:etc/apt/trusted.gph.d/kali-archive-keyring.asc)"
			wget -qO- --tries=20 "https://archive.kali.org/archive-key.asc" --show-progress --progress=bar:force:noscroll -O $source/$folder/etc/apt/trusted.gpg.d/kali-archive-keyring.asc

			echo "$(stdio stdout $distro removing /:root/.bash_profile)"
			rm -rf $source/$folder/root/.bash_profile
			
			if [[ ${select,,} != "cli" ]]; then
				echo "$(stdio stdout $distro creating /:root/.bash_logout)"
				cat <<- EOF > $source/$folder/root/.bash_logout
					#!/usr/bin/env bash
					
					# Stopping VNC Server.
					vncserver-stop
					
					# Kill all dbus and ssh process.
					pkill dbus*
					pkill ssh*
				EOF
				echo "$(stdio stdout $distro chmod+x /:root/.bash_logout)"
				chmod +x $source/$folder/root/.bash_logout
			fi

			case ${select,,} in
				cli)
					echo "$(stdio stdout $distro craeting /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Add key for avoid outdated GPG Key alert.
						echo -e "$(stdio stdout $distro adding gpg-key)"
						apt-key add /etc/apt/trusted.gpg.d/kali-archive-keyring.asc
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
					EOF
				;;
				desktop)
					params=$desktop
					case ${desktop,,} in
						xfce)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/APT/XFCE4"
								"xfce4_de.sh"
							)
						;;
						lxqt)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/APT/LXQT"
								"lxqt_de.sh"
							)
						;;
						lxde)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/APT/LXDE"
								"lxde_de.sh"
							)
						;;
					esac
					
					echo "$(stdio stdout $distro desktop setup)"
					echo "APT::Acquire::Retries \"3\";" > $source/$folder/etc/apt/apt.conf.d/80-retries
					
					echo "$(stdio stdout $distro downloading /:root/${desktop}.sh)"
					wget -qO- --tries=20 ${rinku[0]}/${rinku[1]} --show-progress --progress=bar:force:noscroll -O $source/$folder/root/${desktop}.sh

					echo "$(stdio stdout $distro chmod+x /:root/${desktop}.sh)"
					chmod +x $source/$folder/root/${desktop}.sh
					
					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Add key for avoid outdated GPG Key alert.
						echo -e "$(stdio stdout $distro adding gpg-key)"
						apt-key add /etc/apt/trusted.gpg.d/kali-archive-keyring.asc
						
						# Updating packages.
						apt update -y
						
						# Installing required packages.
						apt install sudo nano wget bash screenfetch dbus-x11 -y
						clear
						
						if [[ ! -f /root/${desktop}.sh ]]; then
							echo -e "$(stdio stdout $distro downloading ${desktop}.sh)"
							wget -qO- --tries=20 ${rinku[0]}/${rinku[1]} --show-progress --progress=bar:force:noscroll -O /root/${desktop}.sh
						fi
						
						# Executing Desktop Environment Setup file..
						bash /root/${desktop}.sh
						clear
						
						if [[ ! -f /usr/local/bin/vncserver-start ]]; then
							echo -e "$(stdio stdout $distro downloading vncviewer-start)"
							wget -qO- --tries=20 ${rinku[0]}/vncserver-start --show-progress --progress=bar:force:noscroll -O /usr/local/bin/vncserver-start
							
							echo -e "$(stdio stdout $distro chmod +x vncviewer-start)"
							chmod +x /usr/local/bin/vncserver-start
							
							echo -e "$(stdio stdout $distro downloading vncviewer-stop)"
							wget -qO- --tries=20 ${rinku[0]}/vncserver-stop --show-progress --progress=bar:force:noscroll -O /usr/local/bin/vncserver-stop
							
							echo -e "$(stdio stdout $distro chmod+x vncviewer-stop)"
							chmod +x /usr/local/bin/vncserver-stop
						fi
						if [[ ! -f /usr/bin/vncserver ]]; then
							apt install tigervnc-standalone-server -y
						fi
						clear
						
						echo -e "$(stdio stdout $distro installing firefox)"
						apt install firefox-esr -y
						
						echo -e "$(stdio stdout $distro removing ${desktop}.sh)"
						rm -rf /root/${desktop}.sh
						
						echo "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Displaying screenfetch.
						clear && screenfetch -A "Kali Linux" && echo
						sleep 2.4
					EOF
				;;
				window)
					params=$window
					declare -A rinku=(
						[1]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/APT"
						[2]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/WM/APT"
					)
					
					echo "$(stdio stdout $distro window setup)"
					echo "APT::Acquire::Retries \"3\";" > $source/$folder/etc/apt/apt.conf.d/80-retries
					
					echo "$(stdio stdout $distro downloading /:root/${window}.sh)"
					wget -qO- --tries=20 ${rinku[2]}/${window}.sh --show-progress --progress=bar:force:noscroll -O $source/$folder/root/${window}.sh

					echo "$(stdio stdout $distro chmod+x /:root/${window}.sh)"
					chmod +x $source/$folder/root/${window}.sh
					
					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Add key for avoid outdated GPG Key alert.
						echo -e "$(stdio stdout $distro adding gpg-key)"
						apt-key add /etc/apt/trusted.gpg.d/kali-archive-keyring.asc
						
						# Updating packages.
						apt update -y
						
						# Installing required packages.
						apt install sudo nano bash wget screenfetch -y
						clear
						
						if [[ ! -f /root/${window}.sh ]]; then
							echo -e "$(stdio stdout $distro downloading ${window}.sh)"
							wget -qO- --tries=20 ${rinku[2]}/${window}.sh --show-progress --progress=bar:force:noscroll -O /root/${window}.sh
						fi
						
						# Executing Window Manager Setup file..
						bash /root/${window}.sh
						clear
						
						if [[ ! -f /usr/bin/vncserver ]]; then
							apt install tigervnc-standalone-server -y
						fi
						clear
						
						echo -e "$(stdio stdout $distro removing ${window}.sh)"
						rm -rf /root/${window}.sh
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Displaying screenfetch.
						clear && screenfetch -A "Kali Linux" && echo
						sleep 2.4
					EOF
				;;
			esac
			echo "$(stdio stdout $distro chmod+x /:root/.bash_profile)"
			chmod +x $source/$folder/root/.bash_profile
			sleep 2.4
		;;
		manjaro)

			echo "$(stdio stdout $distro removing /:root/.bash_profile)"
			rm -rf $source/$folder/root/.bash_profile

			echo "$(stdio stdout $distro removing /:etc/resolv.conf)"
			rm -rf $target/$folder/etc/resolv.conf
			
			echo "$(stdio stdout $distro creating /:etc/resolve.conf)"
			echo "nameserver 1.1.1.1" > $target/$folder/etc/resolv.conf
			
			echo "$(stdio stdout $distro creating /:usr/local/bin/fix-repo)"
			echo "pacman -Syyuu --noconfirm && pacman-key --init && pacman-key --populate && pacman -Syu --noconfirm" > $target/$folder/usr/local/bin/fix-repo
			
			echo "$(stdio stdout $distro chmod+x /:usr/local/bin/fix-repo)"
			chmod +x $target/$folder/usr/local/bin/fix-repo
			
			echo "$(stdio stdout $distro creating /:etc/pacman.d/mirrorlist)"
			cat <<- EOL > $target/$folder/etc/pacman.d/mirrorlist
				##
				## Manjaro Linux repository mirrorlist
				## Generated on 02 May 2020 14:22
				##
				## Use pacman-mirrors to modify
				##
				
				## Location  : Germany
				## Time      : 99.99
				## Last Sync :
				Server = https://mirrors.dotsrc.org/manjaro-arm/stable/$repo/$arch
			EOL

			case ${select,,} in
				cli)
					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# ...
						pacman-key --init && pacman-key --populate && pacman -Syu --noconfirm
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
					EOF
				;;
				desktop)
					params=$desktop
					case ${desktop,,} in
						xfce)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro/XFCE"
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro"
								"xfce4_de.sh"
							)
						;;
						lxqt)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro/LXQT"
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro"
								"lxqt_de.sh"
							)
						;;
						lxde)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro/LXDE"
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro"
								"lxde_de.sh"
							)
						;;
						mate)
							local rinku=(
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro/MATE"
								"https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro"
								"mate_de.sh"
							)
						;;
					esac
					
					echo "$(stdio stdout $distro desktop setup)"
					echo "$(stdio stdout $distro makedir /:root/.vnc)"
					mkdir -p $source/$folder/root/.vnc
					
					echo "$(stdio stdout $distro downloading /:usr/local/bin/vnviewer-start)"
					wget --tries=20 ${rinku[0]}/vncserver-start -O $source/$folder/usr/local/bin/vncserver-start
					
					echo "$(stdio stdout $distro chmod+x /:usr/local/bin/vnviewer-start)"
					chmod +x $source/$folder/usr/local/bin/vncserver-start
					
					echo "$(stdio stdout $distro downloading /:usr/local/bin/vnviewer-stop)"
					wget --tries=20 ${rinku[0]}/vncserver-stop -O $source/$folder/usr/local/bin/vncserver-stop
					
					echo "$(stdio stdout $distro chmod+x /:usr/local/bin/vnviewer-stop)"
					chmod +x $source/$folder/usr/local/bin/vncserver-stop
					
					echo "$(stdio stdout $distro downlaoding /:root/${desktop}.sh)"
					wget --tries=20 ${rinku[1]}/${rinku[2]} -O $source/$folder/root/${desktop}.sh

					echo "$(stdio stdout $distro chmod+x /:root/${desktop}.sh)"
					chmod +x $source/$folder/root/${desktop}.sh
					
					echo "$(stdio stdout $distro downloading /:root/.vnc/xstartup)"
					wget --tries=20 "https://raw.githubusercontent.com/Techriz/AndronixOrigin/master/Pacman/Manjaro/${desktop^^}/xstartup" -O $source/$folder/root/.vnc/xstartup
					
					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Fixing repository.
						fix-repo
						clear
						
						if [[ ! -f /root/${desktop}.sh ]]; then
							echo -e "$(stdio stdout $distro downloading ${desktop}.sh)"
							wget --tries=20 ${rinku[1]}/${rinku[2]} -O /root/${desktop}.sh
						fi
						
						# Executing Desktop Environment Setup file..
						bash /root/${desktop}.sh
						clear
						
						if [[ ! -f /usr/local/bin/vncserver-start ]]; then
							echo -e "$(stdio stdout $distro downloading vncviewer-start)"
							wget --tries=20 ${rinku[0]}/vncserver-start -O /usr/local/bin/vncserver-start
							
							echo -e "$(stdio stdout $distro chmod+x vncviewer-start)"
							chmod +x /usr/local/bin/vncserver-start
							
							echo -e "$(stdio stdout $distro downloading vncviewer-stop)"
							wget --tries=20 ${rinku[0]}/vncserver-stop -O /usr/local/bin/vncserver-stop
							
							echo -e "$(stdio stdout $distro chmod+x vncviewer-stop)"
							chmod +x /usr/local/bin/vncserver-stop
						fi
						if [[ ! -f /usr/bin/vncserver ]]; then
							pacman -S tigervnc --noconfirm > /dev/null
						fi
						clear
						
						echo -e "$(stdio stdout $distro removing ${desktop}.sh)"
						rm -rf /root/${desktop}.sh
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Clear terminal screen.
						clear && echo
						sleep 2.4
					EOF
				;;
				window)
					params=$window
					declare -A rinku=(
						[1]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/Pacman/Manjaro"
						[2]="https://raw.githubusercontent.com/AndronixApp/AndronixOrigin/master/WM/Pacman"
					)
					
					echo "$(stdio stdout $distro window stup)"
					echo "$(stdio stdout $distro downlaoding /:root/${window}.sh)"
					wget --tries=20 ${rinku[2]}/${window}.sh -O $source/$folder/root/${window}.sh

					echo "$(stdio stdout $distro chmod+x /:root/${window}.sh)"
					chmod +x $source/$folder/root/${window}.sh
					
					echo "$(stdio stdout $distro creating /:root/.bash_profile)"
					cat <<- EOF > $source/$folder/root/.bash_profile
						#!/usr/bin/env bash
						
						# Fixing repository.
						fix-repo
						clear
						
						if [[ ! -f /root/${window}.sh ]]; then
							echo -e "$(stdio stdout $distro downloading ${window}.sh)"
							wget --tries=20 ${rinku[2]}/${window}.sh -O /root/${window}.sh
						fi
						
						# Executing Window Manager Setup file..
						bash /root/${window}.sh
						clear
						
						if [[ ! -f /usr/bin/vncserver ]]; then
							pacman -S tigervnc --noconfirm > /dev/null
						fi
						clear
						
						echo -e "$(stdio stdout $distro removing ${window}.sh)"
						rm -rf /root/${window}.sh
						
						echo -e "$(stdio stdout $distro removing .bash_profile)"
						rm -rf /root/.bash_profile
						
						# Clear terminal screen.
						clear && echo
						sleep 2.4
					EOF
				;;
			esac	
			echo -e "..manjaro: .bash_profile: allow executable"
			chmod +x $source/$folder/root/.bash_profile
			sleep 2.4
		;;
		nethunter) ;;
		parrot) ;;
		ubuntu)
			if [[ $version == 22.04 ]]; then
				pass
			elif [[ $version == 20.03 ]]; then
				pass
			elif [[ $version == 18.04 ]]; then
				pass
			else
				echo -e "$(stdio stderr distro $distro $version)\n"
				exit 1
			fi
			sleep 2.4
		;;
		void) ;;
		*)
			echo -e "$(stdio stderr unknown distro $distro)\n"
			exit 1
		;;
	esac
	if [[ ! -f $termux/files/usr/bin/$binary ]]; then
		distroBinary $distro $binary $launch $folder $source
	fi
	if [[ ! -f $source/$launch ]]; then
		distroLauncher $distro $launch
	fi
	# wget -qO- --tries=20 - --show-progress --progress=bar:force:noscroll -O 
}

# Handle fix distro extraction.
function distroExtract() {
	local inputRemove=
	local inputSkip=
	if [[ $select == "desktop" ]]; then
		source+=/desktop/${desktop,,}
		if [[ ${desktops[$distro]} != "" ]]; then
			case ${desktop,,} in
				xfce) exists=$(echo -e ${desktops[$distro]} | cut -d ";" -f 1) ;;
				lxde) exists=$(echo -e ${desktops[$distro]} | cut -d ";" -f 2) ;;
				lxqt) exists=$(echo -e ${desktops[$distro]} | cut -d ";" -f 3) ;;
				mate) exists=$(echo -e ${desktops[$distro]} | cut -d ";" -f 4) ;;
			esac
			if [[ $exists == "" ]]; then
				echo -e "$(stdio stderr $distro $desktop)\n"
				exit 1
			fi
		else
			echo -e "$(stdio stderr $distro $select)\n"
			exit 1
		fi
	elif [[ $select == "window" ]]; then
		source+=/window/${window,,}
		if [[ ${windows[$distro]} != "" ]]; then
			case ${window,,} in
				awesome) exists=$(echo -e ${windows[$distro]} | cut -d ";" -f 1) ;;
				openbox) exists=$(echo -e ${windows[$distro]} | cut -d ";" -f 2) ;;
				i3) exists=$(echo -e ${windows[$distro]} | cut -d ";" -f 3) ;;
			esac
			if [[ $exists == "" ]]; then
				echo -e "$(stdio stderr $distro $window)\n"
				exit 1
			fi
		else
			echo -e "$(stdio stderr $distro $select)\n"
			exit 1
		fi
	elif [[ $select == "cli" ]]; then
		source+=/cli
	else
		echo -e "$(stdio stderr unknown mode $select)\n"
		exit 1
	fi

	inputRemove=
	if [[ -d "$source/$folder" ]]; then
		puts "  > [a] << Remove previous installation [Y/n]"
		readline "distro" "remove" "Y"
		if [[ ${inputRemove,,} == "y" ]]; then
			rm -rf $source/$folder
			if [[ $? -ne 0 ]]; then
				echo -e "$(stdio stderr remove $folder)\n"
				exit 1
			fi
		fi
	fi
	if [[ ! -d "$source/$folder" ]]; then
		mkdir -p "${source}/${distro,,}-binds"
		if [[ $? -ne 0 ]]; then
			echo -e "$(stdio stderr makedir $folder)\n"
			exit 1
		fi
		echo -e "$(stdio stdout extract $rootfs)"
		archive=$rootfs
		if [[ ! -f $archive ]]; then
			archive=${images}/${distro}/${rootfs}
		fi
		proot --link2symlink tar -xf $archive --exclude=dev -C $source/$folder ||:
		if [[ $? -ne 0 ]] || [[ ! -d $source/$folder ]]; then
			echo -e "$(stdio stderr extract $rootfs)\n"
			exit 1
		fi
	fi
	
	inputRemove=
	puts "  > [a] << Remove image rootfs [Y/n]"
	readline "rootfs" "remove" "Y"
	if [[ ${inputRemove,,} == "y" ]]; then
		rm "${archive}"
		if [[ $? -ne 0 ]]; then
			echo -e "$(stdio stderr remove $rootfs)\n"
			readline "remove" "skip" "Y"
			if [[ ${inputSkip,,} == "n" ]]; then
				echo -e "$(stdio stderr remove aborted)\n"
				exit 1
			fi
		fi
	fi
}

# Handle readline distro input Action.
# distroInputAction [distro] [action] [version]
function distroInputAction() {

	local inputAction=
	local inputSelect=
	local inputWindow=
	local inputDesktop=
	local inputVersion=

	# Handle readline distro input selection mode.
	# distroInputSelect [distro]
	function distroInputSelect() {

		# Handle readline distro input desktop environment.
		# distroInputDesktopEnv [distro]
		function distroInputDesktopEnv() {
			while [[ $inputDesktop == "" ]]; do
				readline $1 "desktop" "XFCE"
				inputDesktop=${inputDesktop^^}
				case $inputDesktop in
					1|XFCE)
						inputDesktop=xfce
					;;
					2|LXQT)
						inputDesktop=lxqt
						case ${1,,} in
							alpine|arch)
								inputDesktop=
							;;
						esac
					;;
					3|LXDE)
						inputDesktop=lxde
						case ${1,,} in
							alpine)
								inputDesktop=
							;;
						esac
					;;
					4|MATE)
						inputDesktop=mate
						if [[ ${1,,} != "manjaro" ]]; then
							inputDesktop=
						fi
					;;
					*)
						inputDesktop=
					;;
				esac
			done
		}

		# Handle readline distro input window manager.
		# distroInputWindowManager [distro]
		function distroInputWindowManager() {
			while [[ $inputWindow == "" ]]; do
				readline $1 "window" "Awesome"
				inputWindow=${inputWindow,,}
				case $inputWindow in
					1|awesome) inputWindow=awesome ;;
					2|openbox) inputWindow=openbox ;;
					3|i3) inputWindow=i3 ;;
					*) inputDesktop= ;;
				esac
			done
		}
		
		while [[ $inputSelect == "" ]]; do
			readline $1 "select" "cli"
			inputSelect=${inputSelect,,}
			case $inputSelect in
				1|cli) inputSelect=cli ;;
				2|window)
					inputSelect=window
					if [[ ${1,,} != "alpine" ]]; then
						distroInputWindowManager $1 $3
						window=$inputWindow
					else
						inputSelect=
					fi
				;;
				3|desktop)
					inputSelect=desktop
					distroInputDesktopEnv $1 $3
					desktop=$inputDesktop
				;;
				*) inputSelect= ;;
			esac
			select=${inputSelect,,}
		done
	}

	# Handle readline distro input selection mode.
	# distroInputImport [distro]
	function distroInputImport() {
		while [[ $inputImport == "" ]]; do
			readline $1 "import"
			if [[ ! -f $inputImport ]]; then
				inputImport=
			fi
		done
		distroInputSelect $1
	}
	
	# Handle readline distro input version.
	# distroInputVersion [distro] [default]
	function distroInputVersion() {
		if [[ ${1,,} == "ubuntu" ]]; then
			while [[ $inputVersion == "" ]]; do
				readline $1 "version" $2
				case $inputVersion in
					1|22|22.04) inputVersion=22.04 ;;
					2|20|20.04) inputVersion=20.04 ;;
					3|18|18.04) inputVersion=18.04 ;;
					*)
						inputVersion=
						continue
					;;
				esac
				version=$inputVersion
			done
		fi
	}
	
	puts
	stdio stdin $1 action
	while [[ $inputAction == "" ]]; do
		readline $1 "action" $2
		case ${inputAction,,} in
			1|install) action=install ;;
			2|import) action=import ;;
			3|remove) action=remove ;;
			4|cancel) action=cancel ;;
			*)
				inputAction=
				continue
			;;
		esac
	done
	if [[ $action != "cancel" ]]; then
		if [[ ${1,,} == "ubuntu" ]]; then
			distroInputVersion $1 $3
			version=$inputVersion
		fi
		if [[ $action == "import" ]]; then
			distroInputImport $1
			import=$inputImport
		fi
		distroInputSelect $1
		select=$inputSelect
		if [[ $select == "window" ]]; then
			window=$inputWindow
		elif [[ $select == "desktop" ]]; then
			desktop=$inputDesktop
		fi
	fi
}

# Handle distro install.
function distroInstall() {

	# Distro Install Source Destination.
	local source=
	local exists=

	# Distro RootFS name based on version number.
	local rootfs=

	# Distro Archive download url.
	local archive=
	local archurl=
	local archname=

	# Make directory of image for downloaded distro archive.
	mkdir -p $images/$distro

	if [[ $distro == "" ]]; then
		echo -e "$(stdio stderr distro required)\n"
		exit 1
	fi
	if [[ $version != "" ]]; then
		rootfs=$distro-rootfs.$version.tar.gz
		source=$target/$version
	else
		rootfs=$distro-rootfs.tar.gz
		source=$target
	fi
	distroArchive $distro
	distroExtract $distro
	distroConfig $distro
	
	puts "source: $source"
	puts "rootfs: $rootfs"
	puts "archname: $archname"
	puts "archurl: $archurl"
}

# Handle building distro launcher executable.
# distroBinary [distro] [launch]
function distroLauncher() {
	pass
}

# Handle distro remove installation.
# distroRemove [distro] [binary] [mode] [desktop|window] [version]
function distroRemove() {
	local inputAsk=
	local pathname=
	if [[ $3 == "cli" ]]; then
		if [[ $5 != "" ]]; then
			pathname=$source/$5/cli
		else
			pathname=$source/cli
		fi
	elif [[ $3 == "desktop" ]]; then
		if [[ $5 != "" ]]; then
			pathname=$source/$5/desktop/${4,,}
		else
			pathname=$source/desktop/${4,,}
		fi
	elif [[ $3 == "window" ]]; then
		if [[ $5 != "" ]]; then
			pathname=$source/$5/window/${4,,}
		else
			pathname=$source/window/${4,,}
		fi
	else
		echo -e "$(stdio stderr mode unknown $3)\n"
		exit 1
	fi
	logo
	echo "$(stdio stdout remove ${1^})"
	puts "  $sint Deletion of ${1^}"
	puts "  [?] Do you want to delete the binary executable [Y/n]"
	puts 
	readline $1 "ask" "Y"
	if [[ ${inputAsk,,} == "y" ]]; then
		if [[ -f $termux/files/usr/bin/$2 ]]; then
			rm $termux/files/usr/bin/$2
			if [[ $? -eq 0 ]]; then
				echo "$(stdio stdout removed $termux/files/usr/bin/$2)"
			else
				echo "$(stdio stderr failed remove $termux/files/usr/bin/$2)"
			fi
		else
			echo "$(stdio stderr none $termux/files/usr/bin/$2)"
		fi
	fi
	if [[ -d $pathname ]]; then
		rm -rf $pathname
		if [[ $? -eq 0 ]]; then
			echo "$(stdio stdout removed $pathname)"
		else
			echo "$(stdio stderr failed remove $pathname)"
		fi
	else
		echo "$(stdio stderr none $pathname)"
	fi
	stdin $1 "back"
	read inputBack
}

# Display application logo.
function logo() {
	clear
	puts ""
}

# Main application.
function main() {
	local inputAnswer=
	local inputInstall=
	local inputQuest=
	for dependency in ${dependencies[@]}; do
		if ! which $dependency >/dev/null; then
			logo
			echo "$(stdio stderr required installed $dependency)"
			while [[ $inputAsk == "" ]]; do
				readline "main" "install" "Y"
				if [[ ${inputInstall,,} == "y" ]]; then
					if which tsu >/dev/null; then
						tsu pkg install $dependency
						if [[ $? -ne 0 ]]; then
							echo -e "$(stdio stderr main tsu error)\n"
							exit 1
						fi
					elif which sudo >/dev/null; then
						sudo apt install $dependency
						if [[ $? -ne 0 ]]; then
							echo -e "$(stdio stderr main sudo error)\n"
							exit 1
						fi
					else
						pkg install $dependency
						if [[ $? -ne 0 ]]; then
							echo -e "$(stdio stderr main failed install)\n"
							exit 1
						fi
					fi
					break
				else
					echo -e "$(stdio stderr main aborted)\n"
					exit 1
				fi
			done
		fi
	done
	if [[ ! -d $termux ]]; then
		architect="aarch64"
		inputAnswer=/self/temporary/termux
		if [[ ! -d $inputAnswer ]]; then
			logo
			echo "$(stdio stdout main)"
			puts "  $sint $appname v$version"
			puts "      No such file or directory ${termux}"
			puts "      Do you want to change the main directoy [Y/n]"
			puts
			while [[ $inputQuest == "" ]]; do
				readline "main" "quest" "Y"
				inputQuest=${inputQuest,,}
				if [[ $inputQuest == "y" ]]; then
					inputAnswer=
					while [[ $inputAnswer == "" ]]; do
						readline "main" "source"
						if [[ $inputAnswer == "" ]]; then
							continue
						elif [[ -d $inputAnswer ]]; then
							termux=$inputAnswer
							install=$termux/linux
							images=$install/.rootfs
							break
						fi
						inputAnswer=
					done
					break
				elif [[ $inputQuest == "n" ]]; then
					echo -e "$(stdio stderr main aborted)\n"
					exit 1
				else
					inputQuest=
				fi
			done
		else
			termux=$inputAnswer
			install=$termux/linux
			images=$install/.rootfs
		fi
	fi
	mkdir -p $images
	penguin
}

# Empty block function
function pass() {
	return 0
}

# Display all available Linux Distros
function penguin() {
	logo
	echo "$(stdio stdout penguin)"
	puts "  $sint $appname v$pversion"
	puts "  [i] Arch ${architect^}"
	puts "  [i] Whoami $whoami"
	puts "  [i] Author $author"
	puts "  [i] E-Mail $author_email"
	puts "  [i] Github $github"
	puts "  [!] Issues $issues"
	puts "  [+] Distro"
	puts "      [1] Alpine"
	puts "      [2] Arch Linux"
	puts "      [3] Debian"
	puts "      [4] Fedora"
	puts "      [5] Kali Linux"
	puts "      [6] Manjaro"
	puts "      [7] Parrot OS"
	puts "      [8] Ubuntu"
	puts "      [9] Void"
	puts
	local iter=1
	local keysets=()
	local inputDistro=
	while [[ $inputDistro == "" ]]; do
		readline "penguin" "distro"
		inputDistro=${inputDistro,,}
		case $inputDistro in
			alpine|arch|debian|fedora|kali|manjaro|parrot|ubuntu|void)
				distro $inputDistro;
				break
			;;
			1|2|3|4|5|6|7|8|9)
				case $inputDistro in
					1) inputDistro=alpine ;;
					2) inputDistro=arch ;;
					3) inputDistro=debian ;;
					4) inputDistro=fedora ;;
					5) inputDistro=kali ;;
					6) inputDistro=manjaro ;;
					7) inputDistro=parrot ;;
					8) inputDistro=ubuntu ;;
					9) inputDistro=void ;;
				esac
				distro $inputDistro;
				break
			;;
			0|exit)
				echo -e "$(stdio stdout penguin closed)\n"
				exit 0
			;;
			*)
				inputDistro=
			;;
		esac
	done
}

# Readline, get input from user.
# readline [prefix] [label] [default]
function readline() {
	stdin $@
	if [[ $1 != "" ]]; then
		if [[ $2 != "" ]]; then
			read input
			if [[ $3 != "" ]]; then
				if [[ $input == "" ]]; then
					input=$3
				fi
			fi
			if [[ $input != "" ]]; then
				eval "input${2^}=\"$input\""
				echo -e "\x20\x20\c"
				echo -e "\e[1;32mstdin\c"
				echo -e "\e[1;38;5;70m<\c"
				echo -e "\e[1;38;5;112m$2\c"
				echo -e "\e[1;38;5;70m<\c"
				echo -e "\e[1;38;5;120m$input\c"
				echo -e "\e[1;38;5;70m>>"
			fi
		else
			read input
			if [[ $input != "" ]]; then
				echo -e "\x20\x20\c"
				echo -e "\e[1;32mstdin\c"
				echo -e "\e[1;38;5;70m<\c"
				echo -e "\e[1;38;5;112m$1\c"
				echo -e "\e[1;38;5;70m<\c"
				echo -e "\e[1;38;5;120m$input\c"
				echo -e "\e[1;38;5;70m>>\c"
			fi
		fi
	else
		read input
		echo -e "\x20\x20\c"
		echo -e "\e[1;32mstdio\c"
		echo -e "\e[1;38;5;70m<"
		echo -e "\e[1;38;5;112min\c"
		echo -e "\e[1;38;5;214m:\c"
		echo -e "\e[1;38;5;70m=\c"
		echo -e "\e[1;38;5;20m$input\c"
		echo -e "\e[1;38;5;70m>"
	fi
}

# Prints standard input label.
# stdin [label] [label] [value]
function stdin() {
	echo -e "$(stdio stdin $@)\x20\e[1;38;5;229m\c"
}

# Prints standard input/output label.
# stdio [i/o] [label] [label] [value]
function stdio() {
	prints=
	prefix="\e[1;32m"
	if [[ $1 != "" ]]; then
		if [[ ${1,,} == "stderr" ]]; then
			prefix="\e[1;31m"
		fi
		prints="${prefix}$1"
		if [[ $2 != "" ]]; then
			prints+="\e[1;38;5;70m<"
			prints+="\e[1;38;5;112m$2"
			prints+="\e[1;38;5;70m>"
			if [[ $3 != "" ]]; then
				prints="${prefix}$1"
				prints+="\e[1;38;5;70m<"
				prints+="\e[1;38;5;112m$2"
				prints+="\e[1;38;5;70m<"
				prints+="\e[1;38;5;190m$3"
				if [[ $4 != "" ]]; then
					prints+="\e[1;38;5;214m:"
					prints+="\e[1;38;5;70m="
					prints+="\e[1;38;5;120m$4"
				fi
				prints+="\e[1;38;5;70m>>"
			fi
		fi
		echo -e "\x20\x20$prints\e[0m"
	fi
}

main
